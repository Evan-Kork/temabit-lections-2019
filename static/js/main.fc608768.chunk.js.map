{"version":3,"sources":["Redux/Reducers/dialigs-reducer.js","components/common/Paginators/Pagunator.module.css","default_files/images/user_default_avatar.jpg","default_files/images/Spinner-1s-200px.svg","API/api.js","components/Menu/Menu.module.css","serviceWorker.js","components/Menu/Menu.js","utilities/object-helpers.js","Redux/Reducers/users-reducer.js","components/common/Paginators/Paginator.js","components/Users/User.js","components/Users/Users.js","Redux/selectors/users-selector.js","components/Users/UsersContainer.js","components/Header/Header.js","Redux/Reducers/auth-reducer.js","components/Header/HeaderContainer.js","components/Login/Login.js","Redux/Reducers/app-reducer.js","hoc/withSuspense.js","App.js","Redux/Reducers/menu-reducer.js","Redux/redux-store.js","index.js","utilities/FormsControl/FormsControl.js","components/common/Preloader.js","utilities/FormsControl/FormsControl.module.css","utilities/validators/validators.js","components/Users/users.module.css","components/Header/Header.module.css","Redux/Reducers/profile-reducer.js"],"names":["initialState","users_from_server","id","name","messages_from_server","message","AddMessageActionCreator","newMessageBody","type","dialogsReducer","state","action","newMessage","module","exports","instance","axios","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","getUnfollow","userId","delete","getfollow","post","AuthAPI","getAuthStatus","login","email","password","rememberMe","logout","ProfileAPI","getProfile","getUserStatus","updateUserStatus","status","put","Boolean","window","location","hostname","match","Menu","className","s","menu","link_menu","to","activeClassName","active_link","Component","updateObjectInArray","items","itemId","objPropName","newObjProps","map","user_from_server","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","IsFetching","isFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","Paginator","totalItemsCount","onPageChanged","portion","pagesCount","Math","ceil","pages","i","push","portionPages","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionNumber","onClick","p","page","style","selectedPage","e","User","user","follow","unfollow","Fragment","key","user_main","src","photos","small","user_default_avatar","alt","userPhoto","disabled","some","Users","users","props","usersFromState","UsersAPI","this","Preloader","React","compose","connect","bind","totalCount","Header","href","loginBlock","isAuth","setAuthUserData","payload","getAuth","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","form_summary_error","messages","length","stopSubmit","_error","formData","initialized","appReducer","withSuspense","fallback","ProfileContainer","lazy","DialogsContainer","App","initializeApp","path","render","UsersContainer","withRouter","app","promise","Promise","all","menuReducer","reducers","combineReducers","profile","profileReducer","dialogs","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","FormControl","input","meta","touched","children","hasError","form_control","Textarea","restProps","child","placeholder","validators","component","text","validate","spinner","value","maxLengthCreator","maxLength","SET_USER_PROFILE","SET_USER_STATUS","DELETE_POST","posts_from_server","newPostText","userStatus","addPostActionCreator","newPost","setUserStatus","log","postId"],"mappings":"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","file":"static/js/main.fc608768.chunk.js","sourcesContent":["// const NEW_MESSAGE_BODY = 'NEW_MESSAGE_BODY';\r\nconst ADD_MESSAGE = 'ADD_MESSAGE';\r\n\r\nlet initialState = {\r\n    users_from_server: [\r\n        {id: 1, name: 'user 1'},\r\n        {id: 2, name: 'user 2'},\r\n        {id: 3, name: 'user 3'},\r\n        {id: 4, name: 'user 4'},\r\n        {id: 5, name: 'user 5'}\r\n    ],\r\n    messages_from_server: [\r\n        {message: 'Message 1'},\r\n        {message: 'Message 2'},\r\n        {message: 'Message 3'},\r\n        {message: 'Message 4'},\r\n        {message: 'Message 5'},\r\n    ]\r\n};\r\nconst dialogsReducer = (state = initialState, action) => {\r\n            // if (action.type === NEW_MESSAGE_BODY) {\r\n        //\r\n        //     return {\r\n        //         ...state,\r\n        //     newMessageBodyState: action.newMessageBody\r\n        //     }\r\n        // } else\r\n            if (action.type === ADD_MESSAGE) {\r\n            let newMessage = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages_from_server: [...state.messages_from_server, {message: newMessage}]\r\n            };\r\n        }\r\n\r\n        return state;\r\n    };\r\n// export const newMessageBodyActionCreator = (newMessageBody) => {\r\n//     return {\r\n//         type: NEW_MESSAGE_BODY,\r\n//         newMessageBody: newMessageBody\r\n//     }\r\n// };\r\nexport const AddMessageActionCreator = (newMessageBody) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        newMessageBody\r\n    }\r\n}\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagunator_selectedPage__2OOAN\"};","module.exports = __webpack_public_path__ + \"static/media/user_default_avatar.cd49a966.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.f4d7875d.svg\";","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"a2b41d7e-e497-49f0-9283-a973ebd9da7e\"\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n        })\r\n    },\r\n    getUnfollow(userId) {\r\n        return instance.delete(`follow/${userId}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getfollow(userId) {\r\n        return instance.post(`follow/${userId}`).then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n}\r\n\r\nexport const AuthAPI = {\r\n    getAuthStatus() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false) {\r\n          return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout () {\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfile (userId) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getUserStatus (userId) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateUserStatus (status) {\r\n        return instance.put(`profile/status`, {status})\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__3aMmy\",\"link_menu\":\"Menu_link_menu__qlMfK\",\"active_link\":\"Menu_active_link__133MQ\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport s from './Menu.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Menu extends Component {\r\n\r\n    render () {\r\n        return (\r\n            <div className={s.menu}>\r\n                <div className={s.link_menu}><NavLink to=\"/profile\" activeClassName={s.active_link}>Profile</NavLink></div>\r\n                <div className={s.link_menu}><NavLink to=\"/news\">News</NavLink></div>\r\n                <div className={s.link_menu}><NavLink to =\"/dialogs\" activeClassName={s.active_link}>Messages</NavLink></div>\r\n                <div className={s.link_menu}><NavLink to =\"/users\" activeClassName={s.active_link}>Users</NavLink></div>\r\n                <div className={s.link_menu}><NavLink to =\"/settings\">Settings</NavLink></div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\nexport default Menu;\r\n\r\n","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(user_from_server => {\r\n        if (user_from_server[objPropName] === itemId) {\r\n            return {...user_from_server, ...newObjProps}\r\n        }\r\n        return user_from_server\r\n    })\r\n}\r\n","import {usersAPI} from \"../../API/api\";\r\nimport {updateObjectInArray} from \"../../utilities/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS_FROM_SERVER = 'SET_USERS_FROM_SERVER';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst IS_FOLLOWING_PROGRESS = \"IS_FOLLOWING_PROGRESS\"\r\n\r\nlet initialState = {\r\n    users_from_server: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users_from_server: updateObjectInArray(state.users_from_server, action.userId, \"id\", {followed: true})\r\n                // users_from_server: state.users_from_server.map(user_from_server => {\r\n                //     if (user_from_server.id === action.userId) {\r\n                //         return {...user_from_server, followed: true}\r\n                //     }\r\n                //     return user_from_server\r\n                // })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users_from_server: updateObjectInArray(state.users_from_server, action.userId, \"id\", {followed: false})\r\n                // users_from_server: state.users_from_server.map(user_from_server => {\r\n                //     if (user_from_server.id === action.userId) {\r\n                //         return {...user_from_server, followed: false}\r\n                //     }\r\n                //     return user_from_server\r\n                // })\r\n\r\n            }\r\n        case SET_USERS_FROM_SERVER: {\r\n            return {\r\n                ...state,\r\n                users_from_server: action.users_from_server\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        }\r\n        case IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state, followingInProgress: action.followingInProgress\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [state.followingInProgress.filter(id => id !== action.userId)]\r\n                // learn this one more time\r\n            }\r\n        }\r\n        default:\r\n\r\n            return state;\r\n    }\r\n};\r\n// Action Creators V\r\nexport const setUsersFromServer = (users_from_server) => (\r\n    {type: SET_USERS_FROM_SERVER, users_from_server}\r\n)\r\nexport const followSuccess = (userId) => (\r\n    {type: FOLLOW, userId}\r\n)\r\nexport const unfollowSuccess = (userId) => (\r\n    {type: UNFOLLOW, userId}\r\n)\r\nexport const setCurrentPage = (currentPage) => (\r\n    {type: SET_CURRENT_PAGE, currentPage: currentPage}\r\n)\r\nexport const setTotalUsersCount = (totalUsersCount) => (\r\n    {type: SET_TOTAL_USERS_COUNT, totalUsersCount: totalUsersCount}\r\n)\r\nexport const IsFetching = (isFetching) => (\r\n    {type: TOGGLE_IS_FETCHING, isFetching}\r\n)\r\nexport const isFollowingProgress = (followingInProgress, userId) => (\r\n    {type: IS_FOLLOWING_PROGRESS, followingInProgress, userId}\r\n)\r\n\r\nexport const getUsers = (currentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(IsFetching(true))\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(IsFetching(false));\r\n        dispatch(setUsersFromServer(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n        dispatch(setCurrentPage(currentPage))\r\n    }\r\n}\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    // old func without refactoring\r\n    // return async (dispatch) => {\r\n    //     dispatch(isFollowingProgress(true, userId))\r\n    //     let data = await usersAPI.getfollow(userId)\r\n    //     if (data.resultCode === 0) {\r\n    //         dispatch(followSuccess(userId))\r\n    //     }\r\n    //     dispatch(isFollowingProgress(false, userId))\r\n    // }\r\n    dispatch(isFollowingProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(isFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n       await followUnfollowFlow(dispatch, userId, usersAPI.getfollow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n      await followUnfollowFlow(dispatch, userId, usersAPI.getUnfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport style from \"./Pagunator.module.css\";\r\n\r\n\r\nlet Paginator = ({currentPage, totalItemsCount, pageSize, onPageChanged, portion = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let portionPages = Math.ceil(pagesCount / portion)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portion + 1\r\n    let rightPortionNumber = portionNumber * portion\r\n    return <div>\r\n        {portionNumber > 1\r\n            && <button onClick={() => {setPortionNumber(portionNumber - 1)}}>Prev</button>\r\n        }\r\n\r\n        {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionNumber).map(page => {\r\n            return (\r\n                <span className={currentPage === page && style.selectedPage}\r\n                      onClick={(e) => {\r\n                          onPageChanged(page)\r\n                      }}\r\n                >\r\n                         {' ' + page + ' '}\r\n                    </span>\r\n            )\r\n        })}\r\n        {portionPages > portionNumber && <button onClick={() =>{setPortionNumber(portionNumber + 1)}}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport style from \"./users.module.css\";\r\nimport user_default_avatar from \"../../default_files/images/user_default_avatar.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nlet User = ({user, followingInProgress, follow, unfollow}) => {\r\n    return <React.Fragment>\r\n            <div key={user.id} className={style.user_main}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                             <img src={user.photos.small != null ? user.photos.small : user_default_avatar} alt=\"\"\r\n                                  className={style.userPhoto}/>\r\n                         <img src=\"\" alt=\"\"/>\r\n                        </NavLink>\r\n\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                unfollow(user.id)\r\n                            }}>Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                follow(user.id)\r\n                            }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>\r\n                            {user.name}\r\n                        </div>\r\n                        <div>\r\n                            {user.status}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <div>\r\n                            {'user.location.country'}\r\n                        </div>\r\n                        <div>\r\n                            {'user.location.city'}\r\n                        </div>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport Paginator from \"../common/Paginators/Paginator\";\r\nimport User from \"./User\";\r\n\r\nlet Users = ({currentPage, totalUsersCount, pageSize, onPageChanged, users, ...props}) => {\r\n    return <React.Fragment>\r\n        <Paginator currentPage={currentPage} totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize} onPageChanged={onPageChanged} />\r\n        {users.map(user => <User user={user} key={user.id} followingInProgress={props.followingInProgress}\r\n                                 follow={props.follow} unfollow={props.unfollow} />)}\r\n    </React.Fragment>\r\n}\r\n\r\nexport default Users;","//import {createSelector} from \"reselect\";\r\n\r\nexport const usersFromState = (state) => {\r\n    return state.users.users_from_server\r\n}\r\n// export const usersFromStateSelector = (state) => {\r\n//     return usersFromState(state).filter(u => true)\r\n// }\r\n// export const usersFromStateSuperSelector = createSelector(usersFromState, (users) => {\r\n//     return users.filter(u => true)\r\n// })\r\nexport const totalUsersCount = (state) => {\r\n    return state.users.totalUsersCount\r\n}\r\nexport const pageSize = (state) => {\r\n    return state.users.pageSize\r\n}\r\nexport const currentPage = (state) => {\r\n    return state.users.currentPage\r\n}\r\nexport const isFetching = (state) => {\r\n    return state.users.isFetching\r\n}\r\nexport const followingInProgress = (state) => {\r\n    return state.users.followingInProgress\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, getUsers, isFollowingProgress, unfollow\r\n} from \"../../Redux/Reducers/users-reducer\";  // Action Creators\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    currentPage,\r\n    followingInProgress,\r\n    isFetching,\r\n    pageSize,\r\n    totalUsersCount,\r\n    usersFromState, usersFromStateSuperSelector\r\n} from \"../../Redux/selectors/users-selector\";\r\n\r\n\r\nclass UsersAPI extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n        // this.props.IsFetching(true)\r\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //     this.props.IsFetching(false);\r\n        //     this.props.setUsersFromServer(data.items);\r\n        //     this.props.setTotalUsersCount(data.totalCount)\r\n        // })\r\n        // this.props.setUsers_from_server([\r\n        // {\r\n        //     id: 1,\r\n        //     photoUrl: 'https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/aaffc3ce-5a3f-4132-bc16-443a20b88fad/d6u8658-ab25d278-831c-48e0-93f7-fad9a7a0582e.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcL2FhZmZjM2NlLTVhM2YtNDEzMi1iYzE2LTQ0M2EyMGI4OGZhZFwvZDZ1ODY1OC1hYjI1ZDI3OC04MzFjLTQ4ZTAtOTNmNy1mYWQ5YTdhMDU4MmUucG5nIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.8ELf-buwgplhwKNksBmOw3NtWi01a6gDQBz1WYZt5fM',\r\n        //     fullName: 'Dovakiin',\r\n        //     status: 'fus ro dah',\r\n        //     location: {country: 'Skyrim', city: 'Solitude'},\r\n        //     followed: false\r\n        // },\r\n        // {\r\n        //     id: 2,\r\n        //     photoUrl: 'https://scontent.fiev25-1.fna.fbcdn.net/v/t31.0-8/11807581_725288450908649_5495255156150976648_o.jpg?_nc_cat=105&_nc_sid=09cbfe&_nc_ohc=L7939DUPdx4AX8j_8qZ&_nc_ht=scontent.fiev25-1.fna&oh=1da1a64da01b9513b3590792f1b6d884&oe=5EC57BBD',\r\n        //     fullName: 'Ashurec',\r\n        //     status: 'I am a developer of this social network',\r\n        //     location: {country: 'Ukraine', city: 'Vinnitsa'},\r\n        //     followed: true\r\n        // },\r\n        // {\r\n        //     id: 3,\r\n        //     photoUrl: 'https://wallpapercave.com/wp/jWp5xRs.jpg',\r\n        //     fullName: 'Miraak',\r\n        //     status: 'Fuck you, I am a true dovakiin',\r\n        //     location: {country: 'Morrovind', city: 'Soltame'},\r\n        //     followed: false\r\n        // }\r\n        //         ]\r\n        //     )\r\n    }\r\n\r\n    onPageChanged = (page) => {\r\n        this.props.getUsers(page, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   users={this.props.users_from_server}\r\n                   currentPage={this.props.currentPage}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   onPageChanged={this.onPageChanged}\r\n                   isFollowingProgress={this.props.isFollowingProgress}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        // users_from_server: state.users.users_from_server,\r\n        // pageSize: state.users.pageSize,\r\n        // totalUsersCount: state.users.totalUsersCount,\r\n        // currentPage: state.users.currentPage,\r\n        // isFetching: state.users.isFetching,\r\n        // followingInProgress: state.users.followingInProgress\r\n\r\n        users_from_server: usersFromState(state),// usersFromStateSuperSelector,\r\n        pageSize: pageSize(state),\r\n        totalUsersCount: totalUsersCount(state),\r\n        currentPage: currentPage(state),\r\n        isFetching: isFetching(state),\r\n        followingInProgress: followingInProgress(state)\r\n    }\r\n}\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         follow: (userId) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId) => {\r\n//             dispatch(unfollowAC(userId));\r\n//         },\r\n//         setUsers_from_server: (users_from_server) => {\r\n//             dispatch(setUsersFromServerAC(users_from_server))\r\n//         },\r\n//         setCurrentPage: (page) => {\r\n//             dispatch(currentPageAC(page))\r\n//         },\r\n//         setTotalUsersCount: (totalUsersCount) => {\r\n//             dispatch(setTotalUsersCountAC(totalUsersCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching) => {\r\n//             dispatch(IsFetchingAC(isFetching))\r\n//         }\r\n//\r\n//     }\r\n// }\r\n\r\n// let UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPI);\r\n\r\n// export default connect(mapStateToProps, {\r\n//     follow: followAC,\r\n//     unfollow: unfollowAC,\r\n//     setUsers_from_server: setUsersFromServerAC,\r\n//     setCurrentPage: currentPageAC,\r\n//     setTotalUsersCount: setTotalUsersCountAC,\r\n//     toggleIsFetching: IsFetchingAC\r\n// })(UsersAPI);\r\n// export default withAuthRedirect (connect(mapStateToProps, {follow, unfollow, currentPage, isFollowingProgress, getUsers})(UsersAPI));\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {follow, unfollow, isFollowingProgress, getUsers}),\r\n)(UsersAPI)","import React, { Component } from \"react\"\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className={s.Header}>\r\n                <a href=\"#s\">Home</a>\r\n                <a href=\"#s\">News Feed</a>\r\n                <a href=\"#s\">Messages</a>\r\n            </div>\r\n                <div className={s.loginBlock}>\r\n                    {this.props.isAuth\r\n                        ? <div>{this.props.login} <button onClick={this.props.logout}>logout</button></div>\r\n                        : <NavLink to={'/login'}>\r\n                        Login\r\n                    </NavLink>\r\n                    }\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Header;","import {AuthAPI} from \"../../API/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_AUTH_USER_DATA = 'SET_AUTH_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false\r\n};\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n// Action Creators V\r\nexport const setAuthUserData = (userId, email, login, isAuth) => (\r\n    {type: SET_AUTH_USER_DATA, payload: {userId, email, login, isAuth}}\r\n)\r\n\r\nexport const getAuth = () => async (dispatch) => {\r\n    let response = await AuthAPI.getAuthStatus()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email, password, rememberMe) => {\r\n    return async (dispatch) => {\r\n        let response = await AuthAPI.login(email, password, rememberMe)\r\n        if (response.data.resultCode === 0) {\r\n            // console.log(response.data)\r\n            dispatch(getAuth())\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n            dispatch(stopSubmit(\"login\", {_error: message}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return async (dispatch) => {\r\n        let response = await AuthAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\nexport default authReducer;","import * as React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../Redux/Reducers/auth-reducer\";\r\n\r\nclass HeaderContainer extends React.Component{\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\nexport default connect (mapStateToProps, {logout}) (HeaderContainer);","import React from \"react\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../../utilities/FormsControl/FormsControl\";\r\nimport {required} from \"../../utilities/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../Redux/Reducers/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from '../../utilities/FormsControl/FormsControl.module.css'\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return <form onSubmit={handleSubmit} action=\"\">\r\n\r\n        {createField(\"email\", \"email\", [required], Input)}\r\n        {createField(\"password\", \"password\", [required], Input, {type: \"password\"})}\r\n        {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\" )}\r\n        {/*<Field name={\"email\"} placeholder={\"email\"} component={Input} validate={[required]}/>*/}\r\n\r\n        {/*<div>*/}\r\n        {/*    <Field name={\"password\"} placeholder={\"password\"} type={`password`} component={Input}*/}\r\n        {/*           validate={[required]}/>*/}\r\n        {/*</div>*/}\r\n        {/*<div>*/}\r\n        {/*    <Field name={\"rememberMe\"} type=\"checkbox\" component={Input}/> remember me*/}\r\n        {/*</div>*/}\r\n        {error && <div className={s.form_summary_error}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <button>\r\n                login\r\n            </button>\r\n        </div>\r\n    </form>\r\n}\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>\r\n            Login\r\n        </h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login, logout})(Login)","import {getAuth} from \"./auth-reducer\";\r\n\r\nconst  INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const  initializedSuccess = () => ({type: INITIALIZED_SUCCESS})\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise = dispatch(getAuth())\r\n    Promise.all([promise]).then ( () => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\nexport default appReducer","import React, {Suspense} from \"react\";\r\nimport Preloader from \"../components/common/Preloader\";\r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n       return (<Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </Suspense>)\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Menu from \"./components/Menu/Menu\";\nimport {Route, withRouter} from \"react-router-dom\";\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport Preloader from \"./components/common/Preloader\";\nimport {initializeApp} from \"./Redux/Reducers/app-reducer\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"App\">\n                <HeaderContainer/>\n                <Menu/>\n                <Route path='/profile/:userId?'\n                       render={withSuspense(ProfileContainer)}\n                />\n                <Route path='/dialogs'\n                       render={withSuspense(DialogsContainer)}\n                />\n                <Route path='/users'\n                       render={() =>\n                           <UsersContainer/>\n                       }\n                />\n                <Route path='/login'\n                       render={() =>\n                           <Login/>\n                       }\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized\n})\n\nexport default compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))\n(App);\n\n/*\n\n<Route exact path='/profile'\n                           render={() => <Profile store={this.props.store}/>}\n                    />\n                    <Route path='/dialogs'\n                           render={() => <DialogsContainer store={this.props.store}/>\n                           }\n                    />\n */","let initialState = {\r\n\r\n};\r\nconst menuReducer = (state = initialState, action) => {\r\n    return state;\r\n};\r\n\r\nexport default menuReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./Reducers/profile-reducer\";\r\nimport dialogsReducer from \"./Reducers/dialigs-reducer\";\r\nimport menuReducer from \"./Reducers/menu-reducer\";\r\nimport usersReducer from \"./Reducers/users-reducer\";\r\nimport authReducer from \"./Reducers/auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer from \"./Reducers/app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    menu: menuReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n// import store from \"./Redux/Store\";  // Store without Redux\nimport store from './Redux/redux-store'\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n\n  ReactDOM.render(\n       <BrowserRouter>\n           <Provider store={store}>\n               <App />\n           </Provider>\n       </BrowserRouter>, document.getElementById('root'));\n\n\n// store.subscribe (renderEntireTree);  // state without redux\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport s from './FormsControl.module.css'\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = error && touched\r\n    return <div className={s.form_control + ' ' + (hasError ? s.error: '')}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = '') => {\r\n    return <div><Field name={name} placeholder={placeholder} component={component} validate={validators} {...props} />{text}</div>\r\n}","import spinner from \"../../default_files/images/Spinner-1s-200px.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = (props) => {\r\n    return <div>\r\n        <img src={spinner} alt=\"fetching\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_control\":\"FormsControl_form_control__ACNSw\",\"error\":\"FormsControl_error__33hA3\",\"form_summary_error\":\"FormsControl_form_summary_error__13vYO\"};","export const required = (value) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user_main\":\"users_user_main__2N5K6\",\"userPhoto\":\"users_userPhoto__3HAEG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"Header_loginBlock__1CBsh\"};","import {ProfileAPI} from \"../../API/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\n// const USER_TEXT_POST_WRITE = 'USER-TEXT-POST-WRITE';\r\nconst SET_USER_PROFILE = 'social-network/profile/SET_USER_DATA';\r\nconst SET_USER_STATUS = 'social-network/profile/SET_USER_STATUS'\r\nconst DELETE_POST = 'social-network/profile/DELETE_POST'\r\n\r\nlet initialState = {\r\n    posts_from_server: [\r\n        {id: 1, post: 'message 1'},\r\n        {id: 2, post: 'message 2'},\r\n        {id: 3, post: 'message 3'},\r\n        {id: 4, post: 'message 4'},\r\n        {id: 5, post: 'message 5'},\r\n        {id: 6, post: 'message 6'},\r\n        {id: 7, post: 'message 7'},\r\n        {id: 8, post: 'message 8'},\r\n        {id: 9, post: 'message 9'},\r\n    ],\r\n    newPostText: '',\r\n    profile: null,\r\n    userStatus: ''\r\n};\r\nconst profileReducer = (state = initialState, action) => {\r\n    console.log(action)\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            return {\r\n                ...state,\r\n                posts_from_server: [...state.posts_from_server, {post: action.newPost}],\r\n            }\r\n        }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state, posts_from_server: state.posts_from_server.filter(p => p.id !== action.postId)\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case SET_USER_STATUS:\r\n            return {\r\n                ...state, userStatus: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addPostActionCreator = (newPost) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPost\r\n    }\r\n};\r\nexport const deletePost = (postId) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId\r\n    }\r\n};\r\nexport const setUserProfile = (profile) => (\r\n    {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    }\r\n)\r\nexport const setUserStatus = (status) => (\r\n    {type: SET_USER_STATUS, status}\r\n)\r\n\r\nexport const getProfile = (userId) => {\r\n    return async (dispatch) => {\r\n        let response = await ProfileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\nexport const getUserStatus = (userId) => async (dispatch) => {\r\n        let response = await ProfileAPI.getUserStatus(userId)\r\n        dispatch(setUserStatus(response.data))\r\n}\r\n// old use with then\r\nexport const updateUserStatus = (status) => {\r\n    return (dispatch) => {\r\n        ProfileAPI.updateUserStatus(status).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserStatus(status))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport default profileReducer"],"sourceRoot":""}